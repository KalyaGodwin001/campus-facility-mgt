generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  LECTURER
  CLASS_REP
  STUDENT
}

enum RoomStatus {
  VACANT
  BOOKED
  MAINTENANCE
}

// Remove this enum
// enum School {
//   BUSINESS
//   MUSIC
//   SSET
//   // Add other schools as needed
// }

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(STUDENT)
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  resetToken   String? @default("")
  resetTokenExpiry DateTime?
  notifications Notification[]
}

model Room {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  capacity    Int
  status      RoomStatus @default(VACANT)
  imageUrl    String?
  features    String[]
  floor       Int
  building    String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  maintenance Maintenance[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  purpose   String
  userId    Int
  roomId    Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
}

model Maintenance {
  id          Int      @id @default(autoincrement())
  roomId      Int
  description String
  startDate   DateTime
  endDate     DateTime
  status      String   @default("scheduled")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  room        Room     @relation(fields: [roomId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
   imageUrl  String?  // Add this line
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

